% Cluster 2D pointclouds with spectral clustering and compare with k-means
% USI, ICS, Lugano
% Numerical Computing 

clear all;close all;
warning OFF;

addpath ../datasets
addpath ../datasets/Meshes

% Specify the number of clusters
K = 4; % choose any K value

%% 1.1) Get coordinate list from pointclouds
Pts_halfk = half(); %can change to any dataset to view the graphical representations
figure;

scatter(Pts_halfk(:,1), Pts_halfk(:,2), 'filled');
title('Half-Kernel');
n = size(Pts_halfk,1);
sigma = log(n); 
S = exp(-squareform(pdist(Pts_halfk)).^2 / (2*sigma^2));

%% 1.2) Find the minimal spanning tree of the full graph. Use the information
%      to determine a valid value for epsilon        
Dis = pdist2(Pts_halfk, Pts_halfk);
A = double(Dis < max(Dis(:)));
MST = minSpanTree(A);
eps = max(MST(MST > 0));
MST_sparse = sparse(MST);
MST_graph = graph(MST_sparse);

figure;
plot(MST_graph, 'XData', Pts_halfk(:,1), 'YData', Pts_halfk(:,2));
title('Minimum Span Tree');
%% 1.3) Create the epsilon similarity graph
[G] = epsilonSimGraph(eps,Pts_halfk);

%% 1.4) Create the adjacency matrix for the epsilon case 

W = double(Dis < eps);
figure;
gplotg(W, Pts_halfk(:,1:2))
title('Adjacency Matrix Visualization')
%% 1.5) Create the Laplacian matrix and implement spectral clustering
[L,Diag] = CreateLapl(W);
[eigVec, eigVal] = eig(L);
[sortedEigVal, ind] = sort(diag(eigVal));
H = eigVec(:, ind(1:K));
H_normalized = diag(1./sqrt(sum(H.^2, 2))) * H;

% Cluster rows of eigenvector matrix of L corresponding to K smallest
% eigennalues. Use kmeans for that.
[D_spec,x_spec]     = kmeans_mod(H_normalized,K,n);

%% 1.6) Run K-means on input data
[D_kmeans,x_kmeans] = kmeans_mod(Pts_halfk,K,n);

%% 1.7) Visualize spectral and k-means clustering results
figure;
subplot(1,2,1)
gplotmap(W,Pts_halfk,x_spec)
title('The spectral clusters')
subplot(1,2,2)
gplotmap(W,Pts_halfk,x_kmeans)
title('The K-means clusters')