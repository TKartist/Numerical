function [part1,part2] = bisection_inertial(A,xy,picture)
% bisection_inertial: Inertial partition of a graph.

    disp('Numerical Computing @ USI Lugano:');
    disp('Implement inertial bisection');
    disp(' ');

   % 1. Calculate the center of mass.
    center_of_mass = mean(xy);

% 2. Construct the matrix M.
    Nxx = 0;
    Nyy = 0;
    Nxy = 0;
    
    for i = 1:length(xy)
        Nxy = Nxy + (xy(i,1)-center_of_mass(1))*(xy(i,2)- center_of_mass(2));
        Nyy = Nyy + (xy(i,2)-center_of_mass(2))^2;
        Nxx = Nxx + (xy(i,1)-center_of_mass(1))^2;
    end
    
    M = [Nxx, Nxy; Nxy, Nyy];
    
    % 3. Calculate the smallest eigenvector of M.
    [V, D] = eig(M);
    [~, minIndex] = min(diag(D));
    reversed = V(:, minIndex);
    
    % 4. Find the line L on which the center of mass lies.
    L = reversed(1) * (xy(:,2) - center_of_mass(2)) - reversed(2) * (xy(:,1) - center_of_mass(1));
    
    % 5. Partition the points around the line L.
    part1 = find(L < median(L));
    part2 = find(L >= median(L));

    if picture == 1
        gplotpart(A,xy,part1);
        title('Inertial bisection using Fiedler Eigenvector');
    end
end
